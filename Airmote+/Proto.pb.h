// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

// @@protoc_insertion_point(imports)

@class Device;
@class DeviceBuilder;
@class DeviceEvent;
@class DeviceEventBuilder;
@class Event;
@class EventBuilder;
@class GestureEvent;
@class GestureEventBuilder;
@class HandMotionEvent;
@class HandMotionEventBuilder;
@class KeypressEvent;
@class KeypressEventBuilder;
@class MotionEvent;
@class MotionEventBuilder;
@class OAuthRequestEvent;
@class OAuthRequestEventBuilder;
@class OAuthResponseEvent;
@class OAuthResponseEventBuilder;
@class TouchEvent;
@class TouchEventBuilder;
#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif

typedef enum {
  PhaseBegan = 0,
  PhaseMoved = 1,
  PhaseStationary = 2,
  PhaseEnded = 3,
  PhaseCancelled = 4,
} Phase;

BOOL PhaseIsValidValue(Phase value);

typedef enum {
  EventTypeDevice = 0,
  EventTypeTouch = 1,
  EventTypeMotion = 2,
  EventTypeKeypress = 3,
  EventTypeGesture = 4,
  EventTypeHandMotion = 5,
  EventTypeHandGesture = 6,
  EventTypeOauthRequest = 7,
  EventTypeOauthResponse = 8,
} EventType;

BOOL EventTypeIsValidValue(EventType value);

typedef enum {
  DeviceVendorIos = 0,
  DeviceVendorAndroid = 1,
  DeviceVendorLeapmotion = 2,
  DeviceVendorKinect = 3,
  DeviceVendorOther = 4,
} DeviceVendor;

BOOL DeviceVendorIsValidValue(DeviceVendor value);

typedef enum {
  DeviceEventTypeRegister = 0,
  DeviceEventTypeUnregister = 1,
} DeviceEventType;

BOOL DeviceEventTypeIsValidValue(DeviceEventType value);

typedef enum {
  MotionEventTypeShake = 0,
} MotionEventType;

BOOL MotionEventTypeIsValidValue(MotionEventType value);

typedef enum {
  KeypressEventStateDown = 0,
  KeypressEventStateUp = 1,
} KeypressEventState;

BOOL KeypressEventStateIsValidValue(KeypressEventState value);

typedef enum {
  GestureEventTypeTap = 0,
  GestureEventTypePinch = 1,
  GestureEventTypePan = 2,
  GestureEventTypeSwipe = 3,
  GestureEventTypeRotation = 4,
  GestureEventTypeLongpress = 5,
  GestureEventTypeCircle = 6,
  GestureEventTypeWave = 7,
} GestureEventType;

BOOL GestureEventTypeIsValidValue(GestureEventType value);

typedef enum {
  GestureEventStatePossible = 0,
  GestureEventStateBegan = 1,
  GestureEventStateChanged = 2,
  GestureEventStateEnded = 3,
  GestureEventStateCancelled = 4,
  GestureEventStateFailed = 5,
} GestureEventState;

BOOL GestureEventStateIsValidValue(GestureEventState value);

typedef enum {
  GestureEventSwipeDirectionRight = 0,
  GestureEventSwipeDirectionLeft = 1,
  GestureEventSwipeDirectionUp = 2,
  GestureEventSwipeDirectionDown = 3,
  GestureEventSwipeDirectionForward = 4,
  GestureEventSwipeDirectionBackward = 5,
} GestureEventSwipeDirection;

BOOL GestureEventSwipeDirectionIsValidValue(GestureEventSwipeDirection value);

typedef enum {
  GestureEventCircleDirectionClockwise = 0,
  GestureEventCircleDirectionCounterClockwise = 1,
} GestureEventCircleDirection;

BOOL GestureEventCircleDirectionIsValidValue(GestureEventCircleDirection value);

typedef enum {
  HandMotionEventStateOpen = 0,
  HandMotionEventStateGrab = 1,
  HandMotionEventStatePinch = 2,
} HandMotionEventState;

BOOL HandMotionEventStateIsValidValue(HandMotionEventState value);


@interface ProtoRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface Event : PBExtendableMessage {
@private
  BOOL hasTimestamp_:1;
  BOOL hasTrackingAreaWidth_:1;
  BOOL hasTrackingAreaHeight_:1;
  BOOL hasTarget_:1;
  BOOL hasReplyTo_:1;
  BOOL hasType_:1;
  SInt64 timestamp;
  SInt32 trackingAreaWidth;
  SInt32 trackingAreaHeight;
  NSString* target;
  NSString* replyTo;
  EventType type;
}
- (BOOL) hasType;
- (BOOL) hasTimestamp;
- (BOOL) hasTrackingAreaWidth;
- (BOOL) hasTrackingAreaHeight;
- (BOOL) hasTarget;
- (BOOL) hasReplyTo;
@property (readonly) EventType type;
@property (readonly) SInt64 timestamp;
@property (readonly) SInt32 trackingAreaWidth;
@property (readonly) SInt32 trackingAreaHeight;
@property (readonly, strong) NSString* target;
@property (readonly, strong) NSString* replyTo;

+ (Event*) defaultInstance;
- (Event*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (EventBuilder*) builder;
+ (EventBuilder*) builder;
+ (EventBuilder*) builderWithPrototype:(Event*) prototype;
- (EventBuilder*) toBuilder;

+ (Event*) parseFromData:(NSData*) data;
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Event*) parseFromInputStream:(NSInputStream*) input;
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface EventBuilder : PBExtendableMessageBuilder {
@private
  Event* result;
}

- (Event*) defaultInstance;

- (EventBuilder*) clear;
- (EventBuilder*) clone;

- (Event*) build;
- (Event*) buildPartial;

- (EventBuilder*) mergeFrom:(Event*) other;
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasType;
- (EventType) type;
- (EventBuilder*) setType:(EventType) value;
- (EventBuilder*) clearType;

- (BOOL) hasTimestamp;
- (SInt64) timestamp;
- (EventBuilder*) setTimestamp:(SInt64) value;
- (EventBuilder*) clearTimestamp;

- (BOOL) hasTrackingAreaWidth;
- (SInt32) trackingAreaWidth;
- (EventBuilder*) setTrackingAreaWidth:(SInt32) value;
- (EventBuilder*) clearTrackingAreaWidth;

- (BOOL) hasTrackingAreaHeight;
- (SInt32) trackingAreaHeight;
- (EventBuilder*) setTrackingAreaHeight:(SInt32) value;
- (EventBuilder*) clearTrackingAreaHeight;

- (BOOL) hasTarget;
- (NSString*) target;
- (EventBuilder*) setTarget:(NSString*) value;
- (EventBuilder*) clearTarget;

- (BOOL) hasReplyTo;
- (NSString*) replyTo;
- (EventBuilder*) setReplyTo:(NSString*) value;
- (EventBuilder*) clearReplyTo;
@end

@interface Device : PBGeneratedMessage {
@private
  BOOL hasHasKeyboard_:1;
  BOOL hasVersion_:1;
  BOOL hasName_:1;
  BOOL hasProductId_:1;
  BOOL hasVendor_:1;
  BOOL hasKeyboard_:1;
  SInt32 version;
  NSString* name;
  NSString* productId;
  DeviceVendor vendor;
}
- (BOOL) hasName;
- (BOOL) hasVendor;
- (BOOL) hasVersion;
- (BOOL) hasProductId;
- (BOOL) hasHasKeyboard;
@property (readonly, strong) NSString* name;
@property (readonly) DeviceVendor vendor;
@property (readonly) SInt32 version;
@property (readonly, strong) NSString* productId;
- (BOOL) hasKeyboard;

+ (Device*) defaultInstance;
- (Device*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (DeviceBuilder*) builder;
+ (DeviceBuilder*) builder;
+ (DeviceBuilder*) builderWithPrototype:(Device*) prototype;
- (DeviceBuilder*) toBuilder;

+ (Device*) parseFromData:(NSData*) data;
+ (Device*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Device*) parseFromInputStream:(NSInputStream*) input;
+ (Device*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface DeviceBuilder : PBGeneratedMessageBuilder {
@private
  Device* result;
}

- (Device*) defaultInstance;

- (DeviceBuilder*) clear;
- (DeviceBuilder*) clone;

- (Device*) build;
- (Device*) buildPartial;

- (DeviceBuilder*) mergeFrom:(Device*) other;
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasName;
- (NSString*) name;
- (DeviceBuilder*) setName:(NSString*) value;
- (DeviceBuilder*) clearName;

- (BOOL) hasVendor;
- (DeviceVendor) vendor;
- (DeviceBuilder*) setVendor:(DeviceVendor) value;
- (DeviceBuilder*) clearVendor;

- (BOOL) hasVersion;
- (SInt32) version;
- (DeviceBuilder*) setVersion:(SInt32) value;
- (DeviceBuilder*) clearVersion;

- (BOOL) hasProductId;
- (NSString*) productId;
- (DeviceBuilder*) setProductId:(NSString*) value;
- (DeviceBuilder*) clearProductId;

- (BOOL) hasHasKeyboard;
- (BOOL) hasKeyboard;
- (DeviceBuilder*) setHasKeyboard:(BOOL) value;
- (DeviceBuilder*) clearHasKeyboard;
@end

@interface DeviceEvent : PBGeneratedMessage {
@private
  BOOL hasDevice_:1;
  BOOL hasType_:1;
  Device* device;
  DeviceEventType type;
}
- (BOOL) hasType;
- (BOOL) hasDevice;
@property (readonly) DeviceEventType type;
@property (readonly, strong) Device* device;

+ (DeviceEvent*) defaultInstance;
- (DeviceEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (DeviceEventBuilder*) builder;
+ (DeviceEventBuilder*) builder;
+ (DeviceEventBuilder*) builderWithPrototype:(DeviceEvent*) prototype;
- (DeviceEventBuilder*) toBuilder;

+ (DeviceEvent*) parseFromData:(NSData*) data;
+ (DeviceEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (DeviceEvent*) parseFromInputStream:(NSInputStream*) input;
+ (DeviceEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (DeviceEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (DeviceEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface DeviceEventBuilder : PBGeneratedMessageBuilder {
@private
  DeviceEvent* result;
}

- (DeviceEvent*) defaultInstance;

- (DeviceEventBuilder*) clear;
- (DeviceEventBuilder*) clone;

- (DeviceEvent*) build;
- (DeviceEvent*) buildPartial;

- (DeviceEventBuilder*) mergeFrom:(DeviceEvent*) other;
- (DeviceEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (DeviceEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasType;
- (DeviceEventType) type;
- (DeviceEventBuilder*) setType:(DeviceEventType) value;
- (DeviceEventBuilder*) clearType;

- (BOOL) hasDevice;
- (Device*) device;
- (DeviceEventBuilder*) setDevice:(Device*) value;
- (DeviceEventBuilder*) setDeviceBuilder:(DeviceBuilder*) builderForValue;
- (DeviceEventBuilder*) mergeDevice:(Device*) value;
- (DeviceEventBuilder*) clearDevice;
@end

@interface TouchEvent : PBGeneratedMessage {
@private
  BOOL hasLocationX_:1;
  BOOL hasLocationY_:1;
  BOOL hasPhase_:1;
  Float32 locationX;
  Float32 locationY;
  Phase phase;
}
- (BOOL) hasLocationX;
- (BOOL) hasLocationY;
- (BOOL) hasPhase;
@property (readonly) Float32 locationX;
@property (readonly) Float32 locationY;
@property (readonly) Phase phase;

+ (TouchEvent*) defaultInstance;
- (TouchEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TouchEventBuilder*) builder;
+ (TouchEventBuilder*) builder;
+ (TouchEventBuilder*) builderWithPrototype:(TouchEvent*) prototype;
- (TouchEventBuilder*) toBuilder;

+ (TouchEvent*) parseFromData:(NSData*) data;
+ (TouchEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TouchEvent*) parseFromInputStream:(NSInputStream*) input;
+ (TouchEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TouchEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TouchEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TouchEventBuilder : PBGeneratedMessageBuilder {
@private
  TouchEvent* result;
}

- (TouchEvent*) defaultInstance;

- (TouchEventBuilder*) clear;
- (TouchEventBuilder*) clone;

- (TouchEvent*) build;
- (TouchEvent*) buildPartial;

- (TouchEventBuilder*) mergeFrom:(TouchEvent*) other;
- (TouchEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TouchEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLocationX;
- (Float32) locationX;
- (TouchEventBuilder*) setLocationX:(Float32) value;
- (TouchEventBuilder*) clearLocationX;

- (BOOL) hasLocationY;
- (Float32) locationY;
- (TouchEventBuilder*) setLocationY:(Float32) value;
- (TouchEventBuilder*) clearLocationY;

- (BOOL) hasPhase;
- (Phase) phase;
- (TouchEventBuilder*) setPhase:(Phase) value;
- (TouchEventBuilder*) clearPhase;
@end

@interface MotionEvent : PBGeneratedMessage {
@private
  BOOL hasType_:1;
  MotionEventType type;
}
- (BOOL) hasType;
@property (readonly) MotionEventType type;

+ (MotionEvent*) defaultInstance;
- (MotionEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (MotionEventBuilder*) builder;
+ (MotionEventBuilder*) builder;
+ (MotionEventBuilder*) builderWithPrototype:(MotionEvent*) prototype;
- (MotionEventBuilder*) toBuilder;

+ (MotionEvent*) parseFromData:(NSData*) data;
+ (MotionEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MotionEvent*) parseFromInputStream:(NSInputStream*) input;
+ (MotionEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MotionEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (MotionEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface MotionEventBuilder : PBGeneratedMessageBuilder {
@private
  MotionEvent* result;
}

- (MotionEvent*) defaultInstance;

- (MotionEventBuilder*) clear;
- (MotionEventBuilder*) clone;

- (MotionEvent*) build;
- (MotionEvent*) buildPartial;

- (MotionEventBuilder*) mergeFrom:(MotionEvent*) other;
- (MotionEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (MotionEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasType;
- (MotionEventType) type;
- (MotionEventBuilder*) setType:(MotionEventType) value;
- (MotionEventBuilder*) clearType;
@end

@interface KeypressEvent : PBGeneratedMessage {
@private
  BOOL hasKeycode_:1;
  BOOL hasState_:1;
  SInt32 keycode;
  KeypressEventState state;
}
- (BOOL) hasState;
- (BOOL) hasKeycode;
@property (readonly) KeypressEventState state;
@property (readonly) SInt32 keycode;

+ (KeypressEvent*) defaultInstance;
- (KeypressEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (KeypressEventBuilder*) builder;
+ (KeypressEventBuilder*) builder;
+ (KeypressEventBuilder*) builderWithPrototype:(KeypressEvent*) prototype;
- (KeypressEventBuilder*) toBuilder;

+ (KeypressEvent*) parseFromData:(NSData*) data;
+ (KeypressEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (KeypressEvent*) parseFromInputStream:(NSInputStream*) input;
+ (KeypressEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (KeypressEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (KeypressEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface KeypressEventBuilder : PBGeneratedMessageBuilder {
@private
  KeypressEvent* result;
}

- (KeypressEvent*) defaultInstance;

- (KeypressEventBuilder*) clear;
- (KeypressEventBuilder*) clone;

- (KeypressEvent*) build;
- (KeypressEvent*) buildPartial;

- (KeypressEventBuilder*) mergeFrom:(KeypressEvent*) other;
- (KeypressEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (KeypressEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasState;
- (KeypressEventState) state;
- (KeypressEventBuilder*) setState:(KeypressEventState) value;
- (KeypressEventBuilder*) clearState;

- (BOOL) hasKeycode;
- (SInt32) keycode;
- (KeypressEventBuilder*) setKeycode:(SInt32) value;
- (KeypressEventBuilder*) clearKeycode;
@end

@interface GestureEvent : PBGeneratedMessage {
@private
  BOOL hasLocationX_:1;
  BOOL hasLocationY_:1;
  BOOL hasPinchScale_:1;
  BOOL hasPinchVelocity_:1;
  BOOL hasPanTranslationX_:1;
  BOOL hasPanTranslationY_:1;
  BOOL hasPanVelocityX_:1;
  BOOL hasPanVelocityY_:1;
  BOOL hasRotationAngle_:1;
  BOOL hasRotationVelocity_:1;
  BOOL hasPressDuration_:1;
  BOOL hasTapCount_:1;
  BOOL hasType_:1;
  BOOL hasState_:1;
  BOOL hasSwipeDirection_:1;
  BOOL hasCircleDirection_:1;
  Float32 locationX;
  Float32 locationY;
  Float32 pinchScale;
  Float32 pinchVelocity;
  Float32 panTranslationX;
  Float32 panTranslationY;
  Float32 panVelocityX;
  Float32 panVelocityY;
  Float32 rotationAngle;
  Float32 rotationVelocity;
  SInt64 pressDuration;
  SInt32 tapCount;
  GestureEventType type;
  GestureEventState state;
  GestureEventSwipeDirection swipeDirection;
  GestureEventCircleDirection circleDirection;
}
- (BOOL) hasLocationX;
- (BOOL) hasLocationY;
- (BOOL) hasType;
- (BOOL) hasState;
- (BOOL) hasTapCount;
- (BOOL) hasPinchScale;
- (BOOL) hasPinchVelocity;
- (BOOL) hasPanTranslationX;
- (BOOL) hasPanTranslationY;
- (BOOL) hasPanVelocityX;
- (BOOL) hasPanVelocityY;
- (BOOL) hasSwipeDirection;
- (BOOL) hasRotationAngle;
- (BOOL) hasRotationVelocity;
- (BOOL) hasPressDuration;
- (BOOL) hasCircleDirection;
@property (readonly) Float32 locationX;
@property (readonly) Float32 locationY;
@property (readonly) GestureEventType type;
@property (readonly) GestureEventState state;
@property (readonly) SInt32 tapCount;
@property (readonly) Float32 pinchScale;
@property (readonly) Float32 pinchVelocity;
@property (readonly) Float32 panTranslationX;
@property (readonly) Float32 panTranslationY;
@property (readonly) Float32 panVelocityX;
@property (readonly) Float32 panVelocityY;
@property (readonly) GestureEventSwipeDirection swipeDirection;
@property (readonly) Float32 rotationAngle;
@property (readonly) Float32 rotationVelocity;
@property (readonly) SInt64 pressDuration;
@property (readonly) GestureEventCircleDirection circleDirection;

+ (GestureEvent*) defaultInstance;
- (GestureEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (GestureEventBuilder*) builder;
+ (GestureEventBuilder*) builder;
+ (GestureEventBuilder*) builderWithPrototype:(GestureEvent*) prototype;
- (GestureEventBuilder*) toBuilder;

+ (GestureEvent*) parseFromData:(NSData*) data;
+ (GestureEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (GestureEvent*) parseFromInputStream:(NSInputStream*) input;
+ (GestureEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (GestureEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (GestureEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface GestureEventBuilder : PBGeneratedMessageBuilder {
@private
  GestureEvent* result;
}

- (GestureEvent*) defaultInstance;

- (GestureEventBuilder*) clear;
- (GestureEventBuilder*) clone;

- (GestureEvent*) build;
- (GestureEvent*) buildPartial;

- (GestureEventBuilder*) mergeFrom:(GestureEvent*) other;
- (GestureEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (GestureEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLocationX;
- (Float32) locationX;
- (GestureEventBuilder*) setLocationX:(Float32) value;
- (GestureEventBuilder*) clearLocationX;

- (BOOL) hasLocationY;
- (Float32) locationY;
- (GestureEventBuilder*) setLocationY:(Float32) value;
- (GestureEventBuilder*) clearLocationY;

- (BOOL) hasType;
- (GestureEventType) type;
- (GestureEventBuilder*) setType:(GestureEventType) value;
- (GestureEventBuilder*) clearType;

- (BOOL) hasState;
- (GestureEventState) state;
- (GestureEventBuilder*) setState:(GestureEventState) value;
- (GestureEventBuilder*) clearState;

- (BOOL) hasTapCount;
- (SInt32) tapCount;
- (GestureEventBuilder*) setTapCount:(SInt32) value;
- (GestureEventBuilder*) clearTapCount;

- (BOOL) hasPinchScale;
- (Float32) pinchScale;
- (GestureEventBuilder*) setPinchScale:(Float32) value;
- (GestureEventBuilder*) clearPinchScale;

- (BOOL) hasPinchVelocity;
- (Float32) pinchVelocity;
- (GestureEventBuilder*) setPinchVelocity:(Float32) value;
- (GestureEventBuilder*) clearPinchVelocity;

- (BOOL) hasPanTranslationX;
- (Float32) panTranslationX;
- (GestureEventBuilder*) setPanTranslationX:(Float32) value;
- (GestureEventBuilder*) clearPanTranslationX;

- (BOOL) hasPanTranslationY;
- (Float32) panTranslationY;
- (GestureEventBuilder*) setPanTranslationY:(Float32) value;
- (GestureEventBuilder*) clearPanTranslationY;

- (BOOL) hasPanVelocityX;
- (Float32) panVelocityX;
- (GestureEventBuilder*) setPanVelocityX:(Float32) value;
- (GestureEventBuilder*) clearPanVelocityX;

- (BOOL) hasPanVelocityY;
- (Float32) panVelocityY;
- (GestureEventBuilder*) setPanVelocityY:(Float32) value;
- (GestureEventBuilder*) clearPanVelocityY;

- (BOOL) hasSwipeDirection;
- (GestureEventSwipeDirection) swipeDirection;
- (GestureEventBuilder*) setSwipeDirection:(GestureEventSwipeDirection) value;
- (GestureEventBuilder*) clearSwipeDirection;

- (BOOL) hasRotationAngle;
- (Float32) rotationAngle;
- (GestureEventBuilder*) setRotationAngle:(Float32) value;
- (GestureEventBuilder*) clearRotationAngle;

- (BOOL) hasRotationVelocity;
- (Float32) rotationVelocity;
- (GestureEventBuilder*) setRotationVelocity:(Float32) value;
- (GestureEventBuilder*) clearRotationVelocity;

- (BOOL) hasPressDuration;
- (SInt64) pressDuration;
- (GestureEventBuilder*) setPressDuration:(SInt64) value;
- (GestureEventBuilder*) clearPressDuration;

- (BOOL) hasCircleDirection;
- (GestureEventCircleDirection) circleDirection;
- (GestureEventBuilder*) setCircleDirection:(GestureEventCircleDirection) value;
- (GestureEventBuilder*) clearCircleDirection;
@end

@interface HandMotionEvent : PBGeneratedMessage {
@private
  BOOL hasLocationX_:1;
  BOOL hasLocationY_:1;
  BOOL hasPitch_:1;
  BOOL hasYaw_:1;
  BOOL hasRoll_:1;
  BOOL hasState_:1;
  BOOL hasPhase_:1;
  Float32 locationX;
  Float32 locationY;
  Float32 pitch;
  Float32 yaw;
  Float32 roll;
  HandMotionEventState state;
  Phase phase;
}
- (BOOL) hasLocationX;
- (BOOL) hasLocationY;
- (BOOL) hasState;
- (BOOL) hasPhase;
- (BOOL) hasPitch;
- (BOOL) hasYaw;
- (BOOL) hasRoll;
@property (readonly) Float32 locationX;
@property (readonly) Float32 locationY;
@property (readonly) HandMotionEventState state;
@property (readonly) Phase phase;
@property (readonly) Float32 pitch;
@property (readonly) Float32 yaw;
@property (readonly) Float32 roll;

+ (HandMotionEvent*) defaultInstance;
- (HandMotionEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (HandMotionEventBuilder*) builder;
+ (HandMotionEventBuilder*) builder;
+ (HandMotionEventBuilder*) builderWithPrototype:(HandMotionEvent*) prototype;
- (HandMotionEventBuilder*) toBuilder;

+ (HandMotionEvent*) parseFromData:(NSData*) data;
+ (HandMotionEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (HandMotionEvent*) parseFromInputStream:(NSInputStream*) input;
+ (HandMotionEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (HandMotionEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (HandMotionEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface HandMotionEventBuilder : PBGeneratedMessageBuilder {
@private
  HandMotionEvent* result;
}

- (HandMotionEvent*) defaultInstance;

- (HandMotionEventBuilder*) clear;
- (HandMotionEventBuilder*) clone;

- (HandMotionEvent*) build;
- (HandMotionEvent*) buildPartial;

- (HandMotionEventBuilder*) mergeFrom:(HandMotionEvent*) other;
- (HandMotionEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (HandMotionEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLocationX;
- (Float32) locationX;
- (HandMotionEventBuilder*) setLocationX:(Float32) value;
- (HandMotionEventBuilder*) clearLocationX;

- (BOOL) hasLocationY;
- (Float32) locationY;
- (HandMotionEventBuilder*) setLocationY:(Float32) value;
- (HandMotionEventBuilder*) clearLocationY;

- (BOOL) hasState;
- (HandMotionEventState) state;
- (HandMotionEventBuilder*) setState:(HandMotionEventState) value;
- (HandMotionEventBuilder*) clearState;

- (BOOL) hasPhase;
- (Phase) phase;
- (HandMotionEventBuilder*) setPhase:(Phase) value;
- (HandMotionEventBuilder*) clearPhase;

- (BOOL) hasPitch;
- (Float32) pitch;
- (HandMotionEventBuilder*) setPitch:(Float32) value;
- (HandMotionEventBuilder*) clearPitch;

- (BOOL) hasYaw;
- (Float32) yaw;
- (HandMotionEventBuilder*) setYaw:(Float32) value;
- (HandMotionEventBuilder*) clearYaw;

- (BOOL) hasRoll;
- (Float32) roll;
- (HandMotionEventBuilder*) setRoll:(Float32) value;
- (HandMotionEventBuilder*) clearRoll;
@end

@interface OAuthRequestEvent : PBGeneratedMessage {
@private
  BOOL hasAuthUrl_:1;
  NSString* authUrl;
}
- (BOOL) hasAuthUrl;
@property (readonly, strong) NSString* authUrl;

+ (OAuthRequestEvent*) defaultInstance;
- (OAuthRequestEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (OAuthRequestEventBuilder*) builder;
+ (OAuthRequestEventBuilder*) builder;
+ (OAuthRequestEventBuilder*) builderWithPrototype:(OAuthRequestEvent*) prototype;
- (OAuthRequestEventBuilder*) toBuilder;

+ (OAuthRequestEvent*) parseFromData:(NSData*) data;
+ (OAuthRequestEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (OAuthRequestEvent*) parseFromInputStream:(NSInputStream*) input;
+ (OAuthRequestEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (OAuthRequestEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (OAuthRequestEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface OAuthRequestEventBuilder : PBGeneratedMessageBuilder {
@private
  OAuthRequestEvent* result;
}

- (OAuthRequestEvent*) defaultInstance;

- (OAuthRequestEventBuilder*) clear;
- (OAuthRequestEventBuilder*) clone;

- (OAuthRequestEvent*) build;
- (OAuthRequestEvent*) buildPartial;

- (OAuthRequestEventBuilder*) mergeFrom:(OAuthRequestEvent*) other;
- (OAuthRequestEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (OAuthRequestEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasAuthUrl;
- (NSString*) authUrl;
- (OAuthRequestEventBuilder*) setAuthUrl:(NSString*) value;
- (OAuthRequestEventBuilder*) clearAuthUrl;
@end

@interface OAuthResponseEvent : PBGeneratedMessage {
@private
  BOOL hasAuthCode_:1;
  NSString* authCode;
}
- (BOOL) hasAuthCode;
@property (readonly, strong) NSString* authCode;

+ (OAuthResponseEvent*) defaultInstance;
- (OAuthResponseEvent*) defaultInstance;

+ (id<PBExtensionField>) event;
- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (OAuthResponseEventBuilder*) builder;
+ (OAuthResponseEventBuilder*) builder;
+ (OAuthResponseEventBuilder*) builderWithPrototype:(OAuthResponseEvent*) prototype;
- (OAuthResponseEventBuilder*) toBuilder;

+ (OAuthResponseEvent*) parseFromData:(NSData*) data;
+ (OAuthResponseEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (OAuthResponseEvent*) parseFromInputStream:(NSInputStream*) input;
+ (OAuthResponseEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (OAuthResponseEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (OAuthResponseEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface OAuthResponseEventBuilder : PBGeneratedMessageBuilder {
@private
  OAuthResponseEvent* result;
}

- (OAuthResponseEvent*) defaultInstance;

- (OAuthResponseEventBuilder*) clear;
- (OAuthResponseEventBuilder*) clone;

- (OAuthResponseEvent*) build;
- (OAuthResponseEvent*) buildPartial;

- (OAuthResponseEventBuilder*) mergeFrom:(OAuthResponseEvent*) other;
- (OAuthResponseEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (OAuthResponseEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasAuthCode;
- (NSString*) authCode;
- (OAuthResponseEventBuilder*) setAuthCode:(NSString*) value;
- (OAuthResponseEventBuilder*) clearAuthCode;
@end


// @@protoc_insertion_point(global_scope)
